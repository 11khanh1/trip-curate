import { useMemo } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import TravelHeader from "@/components/TravelHeader";
import Footer from "@/components/Footer";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "@/components/ui/skeleton";
import { Textarea } from "@/components/ui/textarea";
import OrderHistory from "@/components/orders/OrderHistory";
import CheckoutProgress, { type CheckoutStep } from "@/components/checkout/CheckoutProgress";
import { isAxiosError } from "axios";
import { useToast } from "@/hooks/use-toast";
import { useCart } from "@/context/CartContext";
import { createBooking, type CreateBookingPayload } from "@/services/bookingApi";
import { fetchTourDetail, type PublicTour, type PublicTourPackage, type PublicTourSchedule } from "@/services/publicApi";

const extractOrderCode = (url: string): string | null => {
  try {
    const parsed = new URL(url);
    return parsed.searchParams.get("order_code");
  } catch {
    return null;
  }
};

const CheckoutProgress = ({ steps }: { steps: CheckoutStep[] }) => (
  <div className="rounded-2xl border bg-white p-6 shadow-sm">
    <div className="flex flex-col gap-6 sm:flex-row sm:items-center sm:justify-between">
      {steps.map((step, index) => {
        const isLast = index === steps.length - 1;
        const statusClasses =
          step.status === "complete"
            ? "border-emerald-500 bg-emerald-500 text-white"
            : step.status === "current"
            ? "border-emerald-500 bg-white text-emerald-600"
            : "border-muted-foreground/30 bg-muted text-muted-foreground";
        const labelClasses =
          step.status === "complete"
            ? "text-foreground"
            : step.status === "current"
            ? "text-emerald-600"
            : "text-muted-foreground";
        const icon =
          step.status === "complete" ? (
            <Check className="h-4 w-4" />
          ) : step.status === "current" ? (
            <span className="text-sm font-semibold">{index + 1}</span>
          ) : (
            <MoreHorizontal className="h-5 w-5" />
          );
        const connectorClass =
          step.status === "complete"
            ? "bg-emerald-500"
            : step.status === "current"
            ? "bg-emerald-200"
            : "bg-muted-foreground/20";

        return (
          <div key={step.id} className="flex flex-1 items-center">
            <div className="flex flex-1 flex-col items-center text-center">
              <div className={`flex h-10 w-10 items-center justify-center rounded-full border-2 ${statusClasses}`}>
                {icon}
              </div>
              <span className={`mt-2 text-sm font-semibold ${labelClasses}`}>{step.label}</span>
            </div>
            {!isLast && <div className={`mx-3 hidden h-0.5 flex-1 rounded sm:block ${connectorClass}`} />}
          </div>
        );
      })}
    </div>
  </div>
);

const passengerSchema = z.object({
  type: z.enum(["adult", "child"]),
  full_name: z.string().min(1, "Yêu cầu họ tên"),
  date_of_birth: z.string().optional(),
  document_number: z.string().optional(),
});

const bookingSchema = z.object({
  package_id: z.string().min(1, "Yêu cầu chọn gói dịch vụ"),
  schedule_id: z.string().min(1, "Yêu cầu chọn lịch khởi hành"),
  adults: z.number().int().min(1, "Cần ít nhất 1 người lớn"),
  children: z.number().int().min(0),
  contact_name: z.string().min(1, "Yêu cầu họ tên người liên hệ"),
  contact_email: z.string().email("Email không hợp lệ"),
  contact_phone: z.string().min(6, "Số điện thoại chưa hợp lệ"),
  notes: z.string().optional(),
  payment_method: z.enum(["offline", "sepay"]),
  passengers: z.array(passengerSchema).min(1, "Cần tối thiểu 1 hành khách"),
});

type BookingFormValues = z.infer<typeof bookingSchema>;

const ensurePositive = (value: number, fallback: number) => (Number.isFinite(value) && value >= 0 ? value : fallback);

const BookingCheckout = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { removeItem } = useCart();
  const [searchParams] = useSearchParams();

  const tourId = searchParams.get("tourId") ?? "";
  const cartItemId = searchParams.get("cartItemId") ?? "";
  const defaultPackageId = searchParams.get("packageId") ?? "";
  const defaultScheduleId = searchParams.get("scheduleId") ?? "";
  const initialAdults = ensurePositive(Number.parseInt(searchParams.get("adults") ?? "1", 10), 1) || 1;
  const initialChildren = ensurePositive(Number.parseInt(searchParams.get("children") ?? "0", 10), 0);

